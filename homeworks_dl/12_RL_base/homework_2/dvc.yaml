stages:
  prepare:
    cmd: python -c "import os; os.makedirs('data', exist_ok=True); os.makedirs('models', exist_ok=True); os.makedirs('logs', exist_ok=True); print('Directories created')"
    outs:
      - data

  test:
    cmd: python -m pytest tests/ -v --tb=short
    deps:
      - tests/
      - smart_dqn_agent.py
      - game/
    params:
      - test_params.batch_size
      - test_params.coverage_threshold
    
  train:
    cmd: python smart_dqn_agent.py --train --episodes ${train.episodes} --lr ${train.learning_rate}
    deps:
      - smart_dqn_agent.py
      - game/
    params:
      - train.episodes
      - train.learning_rate
      - train.epsilon_decay
      - train.batch_size
    outs:
      - models/

  validate:
    cmd: >
      python -c "
      import json;
      import os;
      import glob;
      model_files = glob.glob('models/smart_agent_*.pt');
      if not model_files: print('No model files found'); exit(1);
      latest_model = max(model_files, key=os.path.getctime);
      print(f'Latest model: {latest_model}');
      model_size = os.path.getsize(latest_model);
      print(f'Model size: {model_size} bytes');
      log_files = glob.glob('logs/*.png');
      print(f'Found {len(log_files)} log files');
      validation_results = {'model_file': latest_model, 'model_size_bytes': model_size, 'log_files_count': len(log_files), 'validation_passed': model_size > 1000 and len(log_files) >= 0};
      os.makedirs('logs', exist_ok=True);
      with open('logs/validation_results.json', 'w') as f: json.dump(validation_results, f, indent=2);
      print('Validation completed')
      "
    deps:
      - models/
    outs:
      - logs/validation_results.json 